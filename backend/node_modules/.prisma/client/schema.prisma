generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id      String  @id @default(cuid())
  country String
  state   String?
  city    String
  posts   Post[]
  users   User[]

  @@unique([country, state, city])
  @@index([country, city])
  @@map("locations")
}

model User {
  id                        String                      @id @default(cuid())
  email                     String                      @unique
  username                  String                      @unique
  firstName                 String
  lastName                  String
  password                  String
  avatar                    String?
  phone                     String?
  bio                       String?
  website                   String?
  userType                  UserType
  accountStatus             AccountStatus               @default(ACTIVE)
  canLogin                  Boolean                     @default(true)
  isActive                  Boolean                     @default(true)
  isBanned                  Boolean                     @default(false)
  banReason                 String?
  profileViews              Int                         @default(0)
  passwordResetToken        String?
  passwordResetExpiry       DateTime?
  emailVerificationToken    String?
  emailVerified             Boolean                     @default(false)
  emailVerifiedAt           DateTime?
  locationId                String?
  timezone                  String?                     @default("UTC")
  language                  String?                     @default("en")
  lastLoginIP               String?
  lastDailyReset            DateTime                    @default(now())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  lastLogin                 DateTime?
  lastActiveAt              DateTime?
  deletedAt                 DateTime?
  deletionReason            String?
  googleId                  String?                     @unique
  admin                     Admin?
  agency                    Agency?
  reviewedAgencyRequests    AgencyRegistrationRequest[] @relation("AgencyRequestReviewer")
  agencyRegistrationRequest AgencyRegistrationRequest?
  banHistory                Ban[]
  boosts                    Boost[]
  chatMembers               ChatMember[]
  chatRateLimits            ChatRateLimit[]
  client                    Client?
  deviceTokens              DeviceToken[]
  escort                    Escort?
  favorites                 Favorite[]
  identityVerification      IdentityVerification?
  likes                     Like[]
  receivedMessages          Message[]                   @relation("ReceivedMessages")
  sentMessages              Message[]                   @relation("SentMessages")
  notifications             Notification[]
  posts                     Post[]
  reports                   Report[]                    @relation("ReportAuthor")
  reportsReceived           Report[]                    @relation("ReportTarget")
  searchHistory             SearchHistory[]
  subscriptions             Subscription[]
  blockedBy                 UserBlock[]                 @relation("UserBlocked")
  blockedUsers              UserBlock[]                 @relation("UserBlocker")
  receivedInteractions      UserInteraction[]           @relation("InteractionTarget")
  interactions              UserInteraction[]           @relation("InteractionAuthor")
  reputation                UserReputation?
  settings                  UserSettings?
  location                  Location?                   @relation(fields: [locationId], references: [id])

  @@index([userType, isActive, createdAt])
  @@index([userType, isActive, lastLogin])
  @@index([userType, isActive, lastActiveAt])
  @@index([accountStatus])
  @@index([canLogin, userType])
  @@index([createdAt])
  @@index([lastLogin])
  @@index([isActive, userType])
  @@index([profileViews])
  @@index([locationId])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
  @@index([emailVerified])
  @@index([lastDailyReset])
  @@index([googleId])
  @@map("users")
}

model AgencyRegistrationRequest {
  id                 String              @id @default(cuid())
  userId             String              @unique
  fullName           String
  documentNumber     String
  businessPhone      String
  businessEmail      String
  documentFrontImage String
  documentBackImage  String
  reviewNotes        String?
  rejectionReason    String?
  submittedAt        DateTime            @default(now())
  reviewedAt         DateTime?
  reviewedBy         String?
  status             AgencyRequestStatus @default(PENDING)
  reviewer           User?               @relation("AgencyRequestReviewer", fields: [reviewedBy], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([submittedAt])
  @@index([reviewedBy])
  @@map("agency_registration_requests")
}

model UserSettings {
  id                    String             @id @default(cuid())
  userId                String             @unique
  emailNotifications    Boolean            @default(true)
  pushNotifications     Boolean            @default(true)
  messageNotifications  Boolean            @default(true)
  likeNotifications     Boolean            @default(true)
  boostNotifications    Boolean            @default(true)
  profileReminders      Boolean            @default(true)
  verificationReminders Boolean            @default(true)
  showOnline            Boolean            @default(true)
  showLastSeen          Boolean            @default(true)
  allowDirectMessages   Boolean            @default(true)
  showPhoneNumber       Boolean            @default(false)
  showInDiscovery       Boolean            @default(true)
  showInTrending        Boolean            @default(true)
  showInSearch          Boolean            @default(true)
  contentFilter         ContentFilterLevel @default(MODERATE)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model DeviceToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  platform   String
  deviceInfo Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastUsedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([platform, isActive])
  @@map("device_tokens")
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  query     String
  filters   Json?
  results   Int      @default(0)
  clicked   Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([query])
  @@map("search_history")
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("UserBlocker", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId])
  @@map("user_blocks")
}

model IdentityVerification {
  id              String             @id @default(cuid())
  userId          String             @unique
  documentType    String
  documentNumber  String
  documentImages  String[]           @default([])
  selfieImage     String?
  status          VerificationStatus @default(PENDING)
  verifiedBy      String?
  rejectionReason String?
  notes           String?
  submittedAt     DateTime           @default(now())
  completedAt     DateTime?
  expiresAt       DateTime?
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([documentType])
  @@map("identity_verifications")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String
  price         Float
  duration      Int
  features      Json
  isActive      Boolean        @default(true)
  userType      UserType
  priority      Int            @default(0)
  maxPosts      Int?
  maxImages     Int?
  maxBoosts     Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@index([userType, isActive])
  @@index([price, userType])
  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  planId               String
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  postsUsed            Int                @default(0)
  imagesUsed           Int                @default(0)
  boostsUsed           Int                @default(0)
  startsAt             DateTime
  endsAt               DateTime
  cancelledAt          DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status, endsAt])
  @@index([planId, status])
  @@map("subscriptions")
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean     @default(true)
  usageCount  Int         @default(0)
  category    TagCategory @default(GENERAL)
  priority    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  posts       PostTag[]

  @@index([isActive, usageCount])
  @@index([category, isActive])
  @@index([priority, isActive])
  @@map("tags")
}

model PostTag {
  id        String   @id @default(cuid())
  postId    String
  tagId     String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([tagId])
  @@map("post_tags")
}

model Admin {
  id                   String    @id @default(cuid())
  userId               String    @unique
  role                 AdminRole @default(MODERATOR)
  permissions          Json?
  totalBans            Int       @default(0)
  totalReports         Int       @default(0)
  totalVerifications   Int       @default(0)
  totalAgencyApprovals Int       @default(0)
  canDeletePosts       Boolean   @default(false)
  canBanUsers          Boolean   @default(false)
  canModifyPrices      Boolean   @default(false)
  canAccessMetrics     Boolean   @default(false)
  canApproveAgencies   Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([role])
  @@map("admins")
}

model UserReputation {
  id                  String   @id @default(cuid())
  userId              String   @unique
  overallScore        Float    @default(0)
  responseRate        Float    @default(0)
  averageResponseTime Int?
  profileCompleteness Float    @default(0)
  trustScore          Float    @default(0)
  totalViews          Int      @default(0)
  totalLikes          Int      @default(0)
  totalMessages       Int      @default(0)
  totalFavorites      Int      @default(0)
  discoveryScore      Float    @default(0)
  trendingScore       Float    @default(0)
  qualityScore        Float    @default(0)
  lastScoreUpdate     DateTime @default(now())
  spamScore           Float    @default(0)
  reportScore         Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([overallScore])
  @@index([trustScore])
  @@index([discoveryScore])
  @@index([trendingScore])
  @@map("user_reputations")
}

model Escort {
  id                    String               @id @default(cuid())
  userId                String               @unique
  isVerified            Boolean              @default(false)
  verifiedAt            DateTime?
  verifiedBy            String?
  verificationExpiresAt DateTime?
  rating                Float                @default(0.0)
  totalRatings          Int                  @default(0)
  age                   Int?
  height                String?
  weight                String?
  bodyType              String?
  ethnicity             String?
  hairColor             String?
  eyeColor              String?
  rates                 Json?
  availability          Json?
  languages             String[]             @default([])
  maxPosts              Int                  @default(3)
  currentPosts          Int                  @default(0)
  totalBookings         Int                  @default(0)
  completedBookings     Int                  @default(0)
  services              String[]             @default([])
  agencyInvitations     AgencyInvitation[]
  agencyMemberships     AgencyMembership[]
  clientReviews         ClientReview[]       @relation("EscortReviewed")
  verifications         EscortVerification[]
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewsGiven          Review[]             @relation("ReviewAuthor")
  reviews               Review[]             @relation("ReviewTarget")

  @@index([isVerified, rating])
  @@index([rating, totalRatings])
  @@index([currentPosts, maxPosts])
  @@index([age])
  @@index([verificationExpiresAt])
  @@map("escorts")
}

model Agency {
  id                    String               @id @default(cuid())
  userId                String               @unique
  isVerified            Boolean              @default(false)
  verifiedAt            DateTime?
  companyName           String
  businessLicense       String?
  contactPerson         String
  address               String
  cedulaFrente          String?
  cedulaTrasera         String?
  verificationStatus    VerificationStatus   @default(PENDING)
  taxId                 String?
  maxPosts              Int?
  totalEscorts          Int                  @default(0)
  verifiedEscorts       Int                  @default(0)
  totalVerifications    Int                  @default(0)
  activeEscorts         Int                  @default(0)
  defaultCommissionRate Float                @default(0.1)
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations           AgencyInvitation[]
  memberships           AgencyMembership[]
  verifications         EscortVerification[]

  @@index([isVerified])
  @@index([totalEscorts])
  @@index([activeEscorts])
  @@index([verificationStatus])
  @@map("agencies")
}

model Client {
  id                String      @id @default(cuid())
  userId            String      @unique
  points            Int         @default(10)
  isPremium         Boolean     @default(false)
  premiumUntil      DateTime?
  premiumTier       PremiumTier @default(BASIC)
  chatPriorityUntil DateTime?

  // ✅ MANTENER campos viejos (por ahora)
  maxFavorites         Int      @default(5)
  currentFavorites     Int      @default(0)
  dailyMessageLimit    Int      @default(5)
  messagesUsedToday    Int      @default(0)
  canViewPhoneNumbers  Boolean  @default(false)
  canSendImages        Boolean  @default(false)
  canSendVoiceMessages Boolean  @default(false)
  prioritySupport      Boolean  @default(false)
  canSeeOnlineStatus   Boolean  @default(false)
  totalMessagesUsed    Int      @default(0)
  lastMessageReset     DateTime @default(now())

  // ✅ AGREGAR nuevo campo
  canAccessPremiumProfiles Boolean @default(false)

  // ✅ MANTENER resto
  lastDailyPointsClaim   DateTime?
  dailyLoginStreak       Int       @default(0)
  totalDailyPointsEarned Int       @default(0)
  totalPointsEarned      Int       @default(10)
  totalPointsSpent       Int       @default(0)
  pointsLastUpdated      DateTime  @default(now())
  totalPointsPurchased   Int       @default(0)
  agePreferenceMin       Int?
  agePreferenceMax       Int?
  locationPreference     String?

  clientReviews      ClientReview[]      @relation("ClientReviewer")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments           Payment[]
  pointTransactions  PointTransaction[]
  pointsHistory      PointsHistory[]
  pointsPurchases    PointsPurchase[]
  premiumActivations PremiumActivation[]

  @@index([isPremium, premiumTier])
  @@index([points])
  @@index([premiumUntil])
  @@index([totalPointsSpent])
  @@index([maxFavorites, currentFavorites])
  @@index([dailyMessageLimit, messagesUsedToday])
  @@index([lastDailyPointsClaim])
  @@index([dailyLoginStreak])
  @@index([chatPriorityUntil])
  @@map("clients")
}

model PointsPackage {
  id          String           @id @default(cuid())
  name        String           @unique
  points      Int
  price       Float
  bonus       Int              @default(0)
  isActive    Boolean          @default(true)
  isPopular   Boolean          @default(false)
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  purchases   PointsPurchase[]

  @@index([isActive, isPopular])
  @@index([price])
  @@map("points_packages")
}

model PointsPurchase {
  id              String        @id @default(cuid())
  clientId        String
  packageId       String
  pointsPurchased Int
  bonusPoints     Int           @default(0)
  totalPoints     Int
  amountPaid      Float
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime      @default(now())
  completedAt     DateTime?
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  package         PointsPackage @relation(fields: [packageId], references: [id])

  @@index([clientId, status])
  @@index([status, createdAt])
  @@map("points_purchases")
}

model PointTransaction {
  id            String               @id @default(cuid())
  clientId      String
  amount        Int
  type          PointTransactionType
  description   String?
  cost          Float?
  postId        String?
  messageId     String?
  paymentId     String?
  purchaseId    String?
  actionId      String?
  balanceBefore Int
  balanceAfter  Int
  metadata      Json?
  source        String?
  createdAt     DateTime             @default(now())
  client        Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
  @@index([type, createdAt])
  @@index([amount, type])
  @@map("point_transactions")
}

model PointsHistory {
  id            String               @id @default(cuid())
  clientId      String
  type          PointTransactionType
  amount        Int
  description   String
  balanceBefore Int
  balanceAfter  Int
  metadata      Json?
  source        String?
  purchaseId    String?
  actionId      String?
  createdAt     DateTime             @default(now())
  client        Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
  @@index([type, createdAt])
  @@index([createdAt])
  @@map("points_history")
}

model PremiumActivation {
  id          String      @id @default(cuid())
  clientId    String
  tier        PremiumTier
  duration    Int
  pointsCost  Int
  activatedAt DateTime    @default(now())
  expiresAt   DateTime
  isActive    Boolean     @default(true)
  activatedBy String      @default("points")
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, isActive])
  @@index([expiresAt, isActive])
  @@map("premium_activations")
}

model ClientReview {
  id            String    @id @default(cuid())
  rating        Int
  comment       String?
  communication Int?
  punctuality   Int?
  appearance    Int?
  overall       Int?
  service       Int?
  value         Int?
  isAnonymous   Boolean   @default(false)
  isVerified    Boolean   @default(false)
  clientId      String
  escortId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  client        Client    @relation("ClientReviewer", fields: [clientId], references: [id], onDelete: Cascade)
  escort        Escort    @relation("EscortReviewed", fields: [escortId], references: [id], onDelete: Cascade)

  @@unique([clientId, escortId])
  @@index([escortId, rating])
  @@index([rating, createdAt])
  @@index([createdAt])
  @@index([isVerified, rating])
  @@map("client_reviews")
}

model Ban {
  id        String      @id @default(cuid())
  userId    String
  reason    String
  bannedBy  String
  adminId   String?
  isActive  Boolean     @default(true)
  expiresAt DateTime?
  severity  BanSeverity @default(WARNING)
  evidence  Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  appeals   BanAppeal[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([isActive, expiresAt])
  @@index([severity, isActive])
  @@index([bannedBy])
  @@map("bans")
}

model BanAppeal {
  id          String       @id @default(cuid())
  banId       String
  reason      String
  evidence    Json?
  status      AppealStatus @default(PENDING)
  reviewedBy  String?
  reviewNotes String?
  createdAt   DateTime     @default(now())
  reviewedAt  DateTime?
  ban         Ban          @relation(fields: [banId], references: [id], onDelete: Cascade)

  @@index([banId])
  @@index([status])
  @@map("ban_appeals")
}

model UserInteraction {
  id             String          @id @default(cuid())
  userId         String
  targetUserId   String?
  postId         String?
  type           InteractionType
  weight         Float           @default(1)
  duration       Int?
  whatsappOpened Boolean         @default(false)
  deviceType     String?
  source         String?
  location       String?
  sessionId      String?
  userAgent      String?
  metadata       String?
  createdAt      DateTime        @default(now())
  post           Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  targetUser     User?           @relation("InteractionTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  user           User            @relation("InteractionAuthor", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
  @@index([targetUserId, type])
  @@index([postId, type])
  @@index([type, createdAt])
  @@index([type, weight, createdAt])
  @@index([source, type])
  @@index([whatsappOpened])
  @@map("user_interactions")
}

model ChatRateLimit {
  id          String        @id @default(cuid())
  userId      String
  count       Int           @default(0)
  windowStart DateTime      @default(now())
  limitType   RateLimitType @default(DAILY_MESSAGES)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, limitType])
  @@index([windowStart, limitType])
  @@map("chat_rate_limits")
}

model AgencyMembership {
  id                String           @id @default(cuid())
  escortId          String
  agencyId          String
  status            MembershipStatus @default(PENDING)
  role              AgencyRole       @default(MEMBER)
  commissionRate    Float?           @default(0.1)
  canPostForAgency  Boolean          @default(false)
  canManageEscorts  Boolean          @default(false)
  canAccessFinances Boolean          @default(false)
  approvedBy        String?
  approvedAt        DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  agency            Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  escort            Escort           @relation(fields: [escortId], references: [id], onDelete: Cascade)

  @@unique([escortId, agencyId])
  @@index([agencyId, status])
  @@index([status, createdAt])
  @@map("agency_memberships")
}

model AgencyInvitation {
  id                 String           @id @default(cuid())
  agencyId           String
  escortId           String
  status             InvitationStatus @default(PENDING)
  message            String?
  proposedCommission Float?           @default(0.1)
  proposedRole       AgencyRole       @default(MEMBER)
  proposedBenefits   Json?
  invitedBy          String
  respondedAt        DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  expiresAt          DateTime
  deletedAt          DateTime?
  agency             Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  escort             Escort           @relation(fields: [escortId], references: [id], onDelete: Cascade)

  @@unique([agencyId, escortId])
  @@index([escortId, status])
  @@index([status, createdAt])
  @@index([expiresAt, status])
  @@map("agency_invitations")
}

model EscortVerification {
  id                 String              @id @default(cuid())
  agencyId           String
  escortId           String
  pricingId          String
  status             VerificationStatus  @default(PENDING)
  membershipId       String?
  startsAt           DateTime            @default(now())
  expiresAt          DateTime
  isAutoRenewal      Boolean             @default(false)
  reminderSent       Boolean             @default(false)
  documentsSubmitted Json?
  verificationNotes  String?
  rejectionReason    String?
  verificationSteps  Json?
  verifiedBy         String?
  createdAt          DateTime            @default(now())
  completedAt        DateTime?
  deletedAt          DateTime?
  agency             Agency              @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  escort             Escort              @relation(fields: [escortId], references: [id], onDelete: Cascade)
  pricing            VerificationPricing @relation(fields: [pricingId], references: [id])

  @@index([escortId, status])
  @@index([agencyId, status])
  @@index([status, createdAt])
  @@index([expiresAt, reminderSent])
  @@map("escort_verifications")
}

model VerificationPricing {
  id            String               @id @default(cuid())
  name          String
  cost          Float                @default(10.0)
  description   String
  isActive      Boolean              @default(true)
  features      Json?
  duration      Int                  @default(30)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  verifications EscortVerification[]

  @@index([isActive])
  @@index([cost, isActive])
  @@map("verification_pricing")
}

model BoostPricing {
  id         String    @id @default(cuid())
  type       BoostType
  duration   Int
  price      Float
  isActive   Boolean   @default(true)
  multiplier Float     @default(1.5)
  features   Json?
  maxBoosts  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  boosts     Boost[]

  @@index([type, isActive])
  @@index([price, isActive])
  @@index([isActive])
  @@map("boost_pricing")
}

model Post {
  id              String            @id @default(cuid())
  title           String
  description     String
  images          String[]          @default([])
  phone           String
  isActive        Boolean           @default(true)
  views           Int               @default(0)
  viewsToday      Int               @default(0)
  clicks          Int               @default(0)
  clicksToday     Int               @default(0)
  score           Float             @default(0)
  engagementRate  Float             @default(0)
  lastBoosted     DateTime?
  locationId      String?
  rates           Json?
  availability    Json?
  trendingScore   Float             @default(0)
  isTrending      Boolean           @default(false)
  isFeatured      Boolean           @default(false)
  discoveryScore  Float             @default(0)
  qualityScore    Float             @default(0)
  lastScoreUpdate DateTime          @default(now())
  isPrivate       Boolean           @default(false)
  premiumOnly     Boolean           @default(false)
  uniqueViews     Int               @default(0)
  totalTime       Int               @default(0)
  bounceRate      Float             @default(0)
  whatsappClicks  Int               @default(0)
  hasActiveBoost  Boolean           @default(false)
  boostEndsAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  expiresAt       DateTime?
  authorId        String
  age             Int?
  location        String?
  services        String[]          @default([])
  sexo            String?
  boosts          Boost[]
  favorites       Favorite[]
  likes           Like[]
  tags            PostTag[]
  author          User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  locationRef     Location?         @relation(fields: [locationId], references: [id])
  reports         Report[]
  trendingHistory TrendingHistory[]
  interactions    UserInteraction[]

  @@index([isActive, createdAt])
  @@index([authorId, isActive])
  @@index([score, isActive])
  @@index([trendingScore, isTrending, isActive])
  @@index([lastBoosted, isActive])
  @@index([score, lastBoosted, isActive])
  @@index([views, isActive])
  @@index([engagementRate, isActive])
  @@index([discoveryScore, isActive])
  @@index([locationId, isActive])
  @@index([isFeatured, isActive])
  @@index([premiumOnly, isActive])
  @@index([hasActiveBoost, boostEndsAt])
  @@index([whatsappClicks, isActive])
  @@index([age])
  @@index([location])
  @@index([sexo])
  @@map("posts")
}

model TrendingHistory {
  id       String   @id @default(cuid())
  postId   String
  position Int
  score    Float
  category String?
  date     DateTime @default(now())
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([date, position])
  @@index([postId, date])
  @@index([category, date])
  @@map("trending_history")
}

model Chat {
  id              String        @id @default(cuid())
  isGroup         Boolean       @default(false)
  name            String?
  description     String?
  avatar          String?
  isDisputeChat   Boolean       @default(false)
  disputeStatus   DisputeStatus @default(ACTIVE)
  disputeReason   String?
  isArchived      Boolean       @default(false)
  mutedUntil      DateTime?
  maxMembers      Int?          @default(100)
  isPrivate       Boolean       @default(true)
  requireApproval Boolean       @default(false)
  allowFiles      Boolean       @default(true)
  allowImages     Boolean       @default(true)
  allowVoice      Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  lastActivity    DateTime      @default(now())
  members         ChatMember[]
  messages        Message[]

  @@index([isGroup, isArchived])
  @@index([lastActivity])
  @@index([isDisputeChat, disputeStatus])
  @@map("chats")
}

model ChatMember {
  id                String   @id @default(cuid())
  userId            String
  chatId            String
  joinedAt          DateTime @default(now())
  lastRead          DateTime @default(now())
  isMuted           Boolean  @default(false)
  role              ChatRole @default(MEMBER)
  messageCount      Int      @default(0)
  maxMessages       Int      @default(3)
  canAddMembers     Boolean  @default(false)
  canDeleteMessages Boolean  @default(false)
  canManageChat     Boolean  @default(false)
  messagesCount     Int      @default(0)
  chat              Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@index([chatId])
  @@index([userId])
  @@index([lastRead])
  @@index([messageCount, maxMessages])
  @@map("chat_members")
}

model Message {
  id               String      @id @default(cuid())
  content          String?
  messageType      MessageType @default(TEXT)
  fileUrl          String?
  fileName         String?
  fileSize         Int?
  mimeType         String?
  isRead           Boolean     @default(false)
  costPoints       Int?
  isPremiumMessage Boolean     @default(false)
  isEdited         Boolean     @default(false)
  editedAt         DateTime?
  isForwarded      Boolean     @default(false)
  replyToId        String?
  isEncrypted      Boolean     @default(false)
  expiresAt        DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  deletedAt        DateTime?
  readAt           DateTime?
  senderId         String
  receiverId       String?
  chatId           String
  chat             Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  receiver         User?       @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender           User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId, createdAt])
  @@index([senderId])
  @@index([receiverId])
  @@index([isPremiumMessage])
  @@index([isRead, chatId])
  @@index([replyToId])
  @@index([costPoints])
  @@map("messages")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  postId     String
  isNotified Boolean  @default(true)
  createdAt  DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt])
  @@map("favorites")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@map("likes")
}

model Review {
  id              String    @id @default(cuid())
  rating          Int
  comment         String?
  professionalism Int?
  communication   Int?
  reliability     Int?
  appearance      Int?
  service         Int?
  isAnonymous     Boolean   @default(false)
  isVerified      Boolean   @default(false)
  helpfulVotes    Int       @default(0)
  authorId        String
  targetId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  author          Escort    @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  target          Escort    @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([authorId, targetId])
  @@index([targetId, rating])
  @@index([rating, createdAt])
  @@index([createdAt])
  @@index([isVerified, rating])
  @@map("reviews")
}

model Report {
  id           String         @id @default(cuid())
  reason       ReportReason
  description  String?
  status       ReportStatus   @default(PENDING)
  evidence     Json?
  category     String?
  severity     ReportSeverity @default(LOW)
  resolution   String?
  resolvedBy   String?
  resolvedAt   DateTime?
  actionTaken  String?
  authorId     String
  targetUserId String?
  postId       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  author       User           @relation("ReportAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  targetUser   User?          @relation("ReportTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([reason, status])
  @@index([authorId])
  @@index([resolvedBy])
  @@index([severity, status])
  @@map("reports")
}

model Notification {
  id             String               @id @default(cuid())
  title          String
  message        String
  type           NotificationType
  isRead         Boolean              @default(false)
  data           Json?
  priority       NotificationPriority @default(NORMAL)
  expiresAt      DateTime?
  isSent         Boolean              @default(false)
  sentAt         DateTime?
  deliveryMethod String[]             @default([])
  isEmailSent    Boolean              @default(false)
  emailSentAt    DateTime?
  actionUrl      String?
  actionText     String?
  userId         String
  createdAt      DateTime             @default(now())
  deletedAt      DateTime?
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@index([priority, createdAt])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([type, isRead])
  @@index([isEmailSent, emailSentAt])
  @@map("notifications")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  type            PaymentType
  description     String?
  stripePaymentId String?
  metadata        Json?
  failureReason   String?
  refundReason    String?
  processorFee    Float?
  netAmount       Float?
  taxAmount       Float?
  taxRate         Float?
  clientId        String?
  escortId        String?
  agencyId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  completedAt     DateTime?
  client          Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, status])
  @@index([escortId, status])
  @@index([agencyId, status])
  @@index([status, createdAt])
  @@index([type, status])
  @@index([amount, type])
  @@index([stripePaymentId])
  @@map("payments")
}

model Boost {
  id               String       @id @default(cuid())
  pricingId        String
  isActive         Boolean      @default(true)
  amount           Float        @default(0) // ✅ AGREGAR ESTA LÍNEA
  userId           String
  postId           String
  viewsBefore      Int          @default(0)
  viewsAfter       Int          @default(0)
  clicksBefore     Int          @default(0)
  clicksAfter      Int          @default(0)
  engagementBefore Float        @default(0)
  engagementAfter  Float        @default(0)
  conversionRate   Float        @default(0)
  targetAudience   Json?
  geography        String?
  stackLevel       Int          @default(1)
  isStackBoost     Boolean      @default(false)
  createdAt        DateTime     @default(now())
  expiresAt        DateTime
  deletedAt        DateTime?
  post             Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  pricing          BoostPricing @relation(fields: [pricingId], references: [id])
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive, expiresAt])
  @@index([postId, isActive])
  @@index([userId])
  @@index([expiresAt])
  @@index([stackLevel, isStackBoost])
  @@index([amount, isActive]) // ✅ AGREGAR ESTE ÍNDICE TAMBIÉN
  @@map("boosts")
}

model AppMetrics {
  id                   String   @id @default(cuid())
  totalUsers           Int      @default(0)
  totalEscorts         Int      @default(0)
  totalAgencies        Int      @default(0)
  totalClients         Int      @default(0)
  totalAdmins          Int      @default(0)
  totalPosts           Int      @default(0)
  totalPayments        Float    @default(0)
  totalRevenue         Float    @default(0)
  activeUsers          Int      @default(0)
  bannedUsers          Int      @default(0)
  verifiedEscorts      Int      @default(0)
  premiumClients       Int      @default(0)
  pendingAgencies      Int      @default(0)
  totalVerifications   Int      @default(0)
  expiredVerifications Int      @default(0)
  totalPointsSold      Int      @default(0)
  totalPointsSpent     Int      @default(0)
  totalBoosts          Int      @default(0)
  pointsRevenue        Float    @default(0)
  dailyLoginStreaks    Int      @default(0)
  totalMessages        Int      @default(0)
  averageSessionTime   Float    @default(0)
  conversionRate       Float    @default(0)
  churnRate            Float    @default(0)
  revenuePerUser       Float    @default(0)
  basicClients         Int      @default(0)
  premiumClientsTier   Int      @default(0)
  vipClients           Int      @default(0)
  dailyActiveUsers     Int      @default(0)
  weeklyActiveUsers    Int      @default(0)
  monthlyActiveUsers   Int      @default(0)
  topCountries         Json?
  topCities            Json?
  date                 DateTime @default(now())
  createdAt            DateTime @default(now())

  @@index([date])
  @@map("app_metrics")
}

enum UserType {
  ESCORT
  AGENCY
  CLIENT
  ADMIN
}

enum AccountStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
  BANNED
}

enum AgencyRequestStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum PremiumTier {
  BASIC
  PREMIUM
  VIP // ✅ MANTENER por ahora
}

enum PointAction {
  PREMIUM_DAY // ✅ MANTENER por ahora
  CHAT_PRIORITY
  EXTRA_FAVORITE // ✅ MANTENER por ahora
  PROFILE_BOOST // ✅ MANTENER por ahora
  PHONE_ACCESS // ✅ MANTENER por ahora
  IMAGE_MESSAGE // ✅ MANTENER por ahora
}

enum RateLimitType {
  DAILY_MESSAGES
  HOURLY_MESSAGES
  PHONE_ACCESS
  IMAGE_MESSAGES
  VOICE_MESSAGES
  FILE_UPLOADS
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

enum VerificationStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
}

enum AgencyRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum ChatRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum DisputeStatus {
  ACTIVE
  RESOLVED
  ESCALATED
  CLOSED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM
  LOCATION
  CONTACT
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  FAKE_PROFILE
  SCAM
  HARASSMENT
  COPYRIGHT
  UNDERAGE
  VIOLENCE
  FRAUD
  IMPERSONATION
  ADULT_CONTENT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  REJECTED
  ESCALATED
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum NotificationType {
  MESSAGE
  LIKE
  FAVORITE
  REVIEW
  BOOST_EXPIRED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  AGENCY_INVITE
  VERIFICATION_COMPLETED
  VERIFICATION_EXPIRING
  MEMBERSHIP_REQUEST
  SYSTEM
  TRENDING
  PROMOTION
  SECURITY_ALERT
  SUBSCRIPTION_EXPIRING
  NEW_FOLLOWER
  POST_APPROVED
  POST_REJECTED
  PROFILE_INCOMPLETE
  AGENCY_APPROVED
  AGENCY_REJECTED
  POINTS_LOW
  DAILY_POINTS_AVAILABLE
  PREMIUM_EXPIRED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  DISPUTED
  PROCESSING
}

enum PaymentType {
  BOOST
  PREMIUM
  POINTS
  VERIFICATION
  SUBSCRIPTION
  TIP
  COMMISSION
  POST_ADDITIONAL
  STACK_BOOST
}

enum BoostType {
  BASIC
  PREMIUM
  FEATURED
  SUPER
  MEGA
}

enum PointTransactionType {
  PURCHASE
  BONUS_POINTS
  DAILY_LOGIN
  REGISTRATION_BONUS
  REFERRAL_REWARD
  STREAK_BONUS
  PREMIUM_DAY // ✅ MANTENER por ahora
  CHAT_PRIORITY
  EXTRA_FAVORITE // ✅ MANTENER por ahora
  PROFILE_BOOST // ✅ MANTENER por ahora
  PHONE_ACCESS // ✅ MANTENER por ahora
  IMAGE_MESSAGE // ✅ MANTENER por ahora
  REFUND
  ADMIN_ADJUSTMENT
  EXPIRED_PREMIUM
}

enum InteractionType {
  VIEW
  LIKE
  CHAT
  PROFILE_VISIT
  POST_CLICK
  FAVORITE
  SHARE
  REPORT
  BOOST_VIEW
  CONTACT_CLICK
  IMAGE_VIEW
  PHONE_VIEW
  LOCATION_VIEW
  WHATSAPP_CLICK
  WHATSAPP_OPEN
  TIME_SPENT
  DISCOVERY_VIEW
  POST_DETAIL_VIEW
  UNLIKE
  UNFAVORITE
}

enum BanSeverity {
  WARNING
  TEMPORARY
  PERMANENT
  SHADOW
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
  PENDING
  PAST_DUE
}

enum TagCategory {
  GENERAL
  SERVICE
  LOCATION
  PHYSICAL
  PREFERENCE
  SPECIAL
}

enum ContentFilterLevel {
  NONE
  MODERATE
  STRICT
}
