
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  country: 'country',
  state: 'state',
  city: 'city'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  avatar: 'avatar',
  phone: 'phone',
  bio: 'bio',
  website: 'website',
  userType: 'userType',
  accountStatus: 'accountStatus',
  canLogin: 'canLogin',
  isActive: 'isActive',
  isBanned: 'isBanned',
  banReason: 'banReason',
  profileViews: 'profileViews',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpiry: 'passwordResetExpiry',
  emailVerificationToken: 'emailVerificationToken',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  locationId: 'locationId',
  timezone: 'timezone',
  language: 'language',
  lastLoginIP: 'lastLoginIP',
  lastDailyReset: 'lastDailyReset',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  lastActiveAt: 'lastActiveAt',
  deletedAt: 'deletedAt',
  deletionReason: 'deletionReason',
  googleId: 'googleId'
};

exports.Prisma.AgencyRegistrationRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  documentNumber: 'documentNumber',
  businessPhone: 'businessPhone',
  businessEmail: 'businessEmail',
  documentFrontImage: 'documentFrontImage',
  documentBackImage: 'documentBackImage',
  reviewNotes: 'reviewNotes',
  rejectionReason: 'rejectionReason',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  status: 'status'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  messageNotifications: 'messageNotifications',
  likeNotifications: 'likeNotifications',
  boostNotifications: 'boostNotifications',
  profileReminders: 'profileReminders',
  verificationReminders: 'verificationReminders',
  showOnline: 'showOnline',
  showLastSeen: 'showLastSeen',
  allowDirectMessages: 'allowDirectMessages',
  showPhoneNumber: 'showPhoneNumber',
  showInDiscovery: 'showInDiscovery',
  showInTrending: 'showInTrending',
  showInSearch: 'showInSearch',
  contentFilter: 'contentFilter',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeviceTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  platform: 'platform',
  deviceInfo: 'deviceInfo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SearchHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  query: 'query',
  filters: 'filters',
  results: 'results',
  clicked: 'clicked',
  createdAt: 'createdAt'
};

exports.Prisma.UserBlockScalarFieldEnum = {
  id: 'id',
  blockerId: 'blockerId',
  blockedId: 'blockedId',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.IdentityVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  documentImages: 'documentImages',
  selfieImage: 'selfieImage',
  status: 'status',
  verifiedBy: 'verifiedBy',
  rejectionReason: 'rejectionReason',
  notes: 'notes',
  submittedAt: 'submittedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  duration: 'duration',
  features: 'features',
  isActive: 'isActive',
  userType: 'userType',
  priority: 'priority',
  maxPosts: 'maxPosts',
  maxImages: 'maxImages',
  maxBoosts: 'maxBoosts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  stripeSubscriptionId: 'stripeSubscriptionId',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  postsUsed: 'postsUsed',
  imagesUsed: 'imagesUsed',
  boostsUsed: 'boostsUsed',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  icon: 'icon',
  isActive: 'isActive',
  usageCount: 'usageCount',
  category: 'category',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostTagScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  totalBans: 'totalBans',
  totalReports: 'totalReports',
  totalVerifications: 'totalVerifications',
  totalAgencyApprovals: 'totalAgencyApprovals',
  canDeletePosts: 'canDeletePosts',
  canBanUsers: 'canBanUsers',
  canModifyPrices: 'canModifyPrices',
  canAccessMetrics: 'canAccessMetrics',
  canApproveAgencies: 'canApproveAgencies',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserReputationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  overallScore: 'overallScore',
  responseRate: 'responseRate',
  averageResponseTime: 'averageResponseTime',
  profileCompleteness: 'profileCompleteness',
  trustScore: 'trustScore',
  totalViews: 'totalViews',
  totalLikes: 'totalLikes',
  totalMessages: 'totalMessages',
  totalFavorites: 'totalFavorites',
  discoveryScore: 'discoveryScore',
  trendingScore: 'trendingScore',
  qualityScore: 'qualityScore',
  lastScoreUpdate: 'lastScoreUpdate',
  spamScore: 'spamScore',
  reportScore: 'reportScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EscortScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  verifiedBy: 'verifiedBy',
  verificationExpiresAt: 'verificationExpiresAt',
  rating: 'rating',
  totalRatings: 'totalRatings',
  age: 'age',
  height: 'height',
  weight: 'weight',
  bodyType: 'bodyType',
  ethnicity: 'ethnicity',
  hairColor: 'hairColor',
  eyeColor: 'eyeColor',
  rates: 'rates',
  availability: 'availability',
  languages: 'languages',
  maxPosts: 'maxPosts',
  currentPosts: 'currentPosts',
  totalBookings: 'totalBookings',
  completedBookings: 'completedBookings',
  services: 'services'
};

exports.Prisma.AgencyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  companyName: 'companyName',
  businessLicense: 'businessLicense',
  contactPerson: 'contactPerson',
  address: 'address',
  cedulaFrente: 'cedulaFrente',
  cedulaTrasera: 'cedulaTrasera',
  verificationStatus: 'verificationStatus',
  taxId: 'taxId',
  maxPosts: 'maxPosts',
  totalEscorts: 'totalEscorts',
  verifiedEscorts: 'verifiedEscorts',
  totalVerifications: 'totalVerifications',
  activeEscorts: 'activeEscorts',
  defaultCommissionRate: 'defaultCommissionRate'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  points: 'points',
  isPremium: 'isPremium',
  premiumUntil: 'premiumUntil',
  premiumTier: 'premiumTier',
  chatPriorityUntil: 'chatPriorityUntil',
  maxFavorites: 'maxFavorites',
  currentFavorites: 'currentFavorites',
  dailyMessageLimit: 'dailyMessageLimit',
  messagesUsedToday: 'messagesUsedToday',
  canViewPhoneNumbers: 'canViewPhoneNumbers',
  canSendImages: 'canSendImages',
  canSendVoiceMessages: 'canSendVoiceMessages',
  prioritySupport: 'prioritySupport',
  canSeeOnlineStatus: 'canSeeOnlineStatus',
  totalMessagesUsed: 'totalMessagesUsed',
  lastMessageReset: 'lastMessageReset',
  canAccessPremiumProfiles: 'canAccessPremiumProfiles',
  lastDailyPointsClaim: 'lastDailyPointsClaim',
  dailyLoginStreak: 'dailyLoginStreak',
  totalDailyPointsEarned: 'totalDailyPointsEarned',
  totalPointsEarned: 'totalPointsEarned',
  totalPointsSpent: 'totalPointsSpent',
  pointsLastUpdated: 'pointsLastUpdated',
  totalPointsPurchased: 'totalPointsPurchased',
  agePreferenceMin: 'agePreferenceMin',
  agePreferenceMax: 'agePreferenceMax',
  locationPreference: 'locationPreference'
};

exports.Prisma.PointsPackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  points: 'points',
  price: 'price',
  bonus: 'bonus',
  isActive: 'isActive',
  isPopular: 'isPopular',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PointsPurchaseScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  packageId: 'packageId',
  pointsPurchased: 'pointsPurchased',
  bonusPoints: 'bonusPoints',
  totalPoints: 'totalPoints',
  amountPaid: 'amountPaid',
  status: 'status',
  stripePaymentId: 'stripePaymentId',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.PointTransactionScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  cost: 'cost',
  postId: 'postId',
  messageId: 'messageId',
  paymentId: 'paymentId',
  purchaseId: 'purchaseId',
  actionId: 'actionId',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  metadata: 'metadata',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.PointsHistoryScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  type: 'type',
  amount: 'amount',
  description: 'description',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  metadata: 'metadata',
  source: 'source',
  purchaseId: 'purchaseId',
  actionId: 'actionId',
  createdAt: 'createdAt'
};

exports.Prisma.PremiumActivationScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  tier: 'tier',
  duration: 'duration',
  pointsCost: 'pointsCost',
  activatedAt: 'activatedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  activatedBy: 'activatedBy'
};

exports.Prisma.ClientReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  communication: 'communication',
  punctuality: 'punctuality',
  appearance: 'appearance',
  overall: 'overall',
  service: 'service',
  value: 'value',
  isAnonymous: 'isAnonymous',
  isVerified: 'isVerified',
  clientId: 'clientId',
  escortId: 'escortId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reason: 'reason',
  bannedBy: 'bannedBy',
  adminId: 'adminId',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  severity: 'severity',
  evidence: 'evidence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BanAppealScalarFieldEnum = {
  id: 'id',
  banId: 'banId',
  reason: 'reason',
  evidence: 'evidence',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewNotes: 'reviewNotes',
  createdAt: 'createdAt',
  reviewedAt: 'reviewedAt'
};

exports.Prisma.UserInteractionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetUserId: 'targetUserId',
  postId: 'postId',
  type: 'type',
  weight: 'weight',
  duration: 'duration',
  whatsappOpened: 'whatsappOpened',
  deviceType: 'deviceType',
  source: 'source',
  location: 'location',
  sessionId: 'sessionId',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ChatRateLimitScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  count: 'count',
  windowStart: 'windowStart',
  limitType: 'limitType'
};

exports.Prisma.AgencyMembershipScalarFieldEnum = {
  id: 'id',
  escortId: 'escortId',
  agencyId: 'agencyId',
  status: 'status',
  role: 'role',
  commissionRate: 'commissionRate',
  canPostForAgency: 'canPostForAgency',
  canManageEscorts: 'canManageEscorts',
  canAccessFinances: 'canAccessFinances',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AgencyInvitationScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  escortId: 'escortId',
  status: 'status',
  message: 'message',
  proposedCommission: 'proposedCommission',
  proposedRole: 'proposedRole',
  proposedBenefits: 'proposedBenefits',
  invitedBy: 'invitedBy',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EscortVerificationScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  escortId: 'escortId',
  pricingId: 'pricingId',
  status: 'status',
  membershipId: 'membershipId',
  startsAt: 'startsAt',
  expiresAt: 'expiresAt',
  isAutoRenewal: 'isAutoRenewal',
  reminderSent: 'reminderSent',
  documentsSubmitted: 'documentsSubmitted',
  verificationNotes: 'verificationNotes',
  rejectionReason: 'rejectionReason',
  verificationSteps: 'verificationSteps',
  verifiedBy: 'verifiedBy',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VerificationPricingScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cost: 'cost',
  description: 'description',
  isActive: 'isActive',
  features: 'features',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BoostPricingScalarFieldEnum = {
  id: 'id',
  type: 'type',
  duration: 'duration',
  price: 'price',
  isActive: 'isActive',
  multiplier: 'multiplier',
  features: 'features',
  maxBoosts: 'maxBoosts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  images: 'images',
  phone: 'phone',
  isActive: 'isActive',
  views: 'views',
  viewsToday: 'viewsToday',
  clicks: 'clicks',
  clicksToday: 'clicksToday',
  score: 'score',
  engagementRate: 'engagementRate',
  lastBoosted: 'lastBoosted',
  locationId: 'locationId',
  rates: 'rates',
  availability: 'availability',
  trendingScore: 'trendingScore',
  isTrending: 'isTrending',
  isFeatured: 'isFeatured',
  discoveryScore: 'discoveryScore',
  qualityScore: 'qualityScore',
  lastScoreUpdate: 'lastScoreUpdate',
  isPrivate: 'isPrivate',
  premiumOnly: 'premiumOnly',
  uniqueViews: 'uniqueViews',
  totalTime: 'totalTime',
  bounceRate: 'bounceRate',
  whatsappClicks: 'whatsappClicks',
  hasActiveBoost: 'hasActiveBoost',
  boostEndsAt: 'boostEndsAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  expiresAt: 'expiresAt',
  authorId: 'authorId',
  age: 'age',
  location: 'location',
  services: 'services',
  sexo: 'sexo'
};

exports.Prisma.TrendingHistoryScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  position: 'position',
  score: 'score',
  category: 'category',
  date: 'date'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  isGroup: 'isGroup',
  name: 'name',
  description: 'description',
  avatar: 'avatar',
  isDisputeChat: 'isDisputeChat',
  disputeStatus: 'disputeStatus',
  disputeReason: 'disputeReason',
  isArchived: 'isArchived',
  mutedUntil: 'mutedUntil',
  maxMembers: 'maxMembers',
  isPrivate: 'isPrivate',
  requireApproval: 'requireApproval',
  allowFiles: 'allowFiles',
  allowImages: 'allowImages',
  allowVoice: 'allowVoice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  lastActivity: 'lastActivity'
};

exports.Prisma.ChatMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chatId: 'chatId',
  joinedAt: 'joinedAt',
  lastRead: 'lastRead',
  isMuted: 'isMuted',
  role: 'role',
  messageCount: 'messageCount',
  maxMessages: 'maxMessages',
  canAddMembers: 'canAddMembers',
  canDeleteMessages: 'canDeleteMessages',
  canManageChat: 'canManageChat',
  messagesCount: 'messagesCount'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  messageType: 'messageType',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isRead: 'isRead',
  costPoints: 'costPoints',
  isPremiumMessage: 'isPremiumMessage',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  isForwarded: 'isForwarded',
  replyToId: 'replyToId',
  isEncrypted: 'isEncrypted',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  readAt: 'readAt',
  senderId: 'senderId',
  receiverId: 'receiverId',
  chatId: 'chatId'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  isNotified: 'isNotified',
  createdAt: 'createdAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  professionalism: 'professionalism',
  communication: 'communication',
  reliability: 'reliability',
  appearance: 'appearance',
  service: 'service',
  isAnonymous: 'isAnonymous',
  isVerified: 'isVerified',
  helpfulVotes: 'helpfulVotes',
  authorId: 'authorId',
  targetId: 'targetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  description: 'description',
  status: 'status',
  evidence: 'evidence',
  category: 'category',
  severity: 'severity',
  resolution: 'resolution',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  actionTaken: 'actionTaken',
  authorId: 'authorId',
  targetUserId: 'targetUserId',
  postId: 'postId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  data: 'data',
  priority: 'priority',
  expiresAt: 'expiresAt',
  isSent: 'isSent',
  sentAt: 'sentAt',
  deliveryMethod: 'deliveryMethod',
  isEmailSent: 'isEmailSent',
  emailSentAt: 'emailSentAt',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  userId: 'userId',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  type: 'type',
  description: 'description',
  stripePaymentId: 'stripePaymentId',
  metadata: 'metadata',
  failureReason: 'failureReason',
  refundReason: 'refundReason',
  processorFee: 'processorFee',
  netAmount: 'netAmount',
  taxAmount: 'taxAmount',
  taxRate: 'taxRate',
  clientId: 'clientId',
  escortId: 'escortId',
  agencyId: 'agencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  completedAt: 'completedAt'
};

exports.Prisma.BoostScalarFieldEnum = {
  id: 'id',
  pricingId: 'pricingId',
  isActive: 'isActive',
  amount: 'amount',
  userId: 'userId',
  postId: 'postId',
  viewsBefore: 'viewsBefore',
  viewsAfter: 'viewsAfter',
  clicksBefore: 'clicksBefore',
  clicksAfter: 'clicksAfter',
  engagementBefore: 'engagementBefore',
  engagementAfter: 'engagementAfter',
  conversionRate: 'conversionRate',
  targetAudience: 'targetAudience',
  geography: 'geography',
  stackLevel: 'stackLevel',
  isStackBoost: 'isStackBoost',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AppMetricsScalarFieldEnum = {
  id: 'id',
  totalUsers: 'totalUsers',
  totalEscorts: 'totalEscorts',
  totalAgencies: 'totalAgencies',
  totalClients: 'totalClients',
  totalAdmins: 'totalAdmins',
  totalPosts: 'totalPosts',
  totalPayments: 'totalPayments',
  totalRevenue: 'totalRevenue',
  activeUsers: 'activeUsers',
  bannedUsers: 'bannedUsers',
  verifiedEscorts: 'verifiedEscorts',
  premiumClients: 'premiumClients',
  pendingAgencies: 'pendingAgencies',
  totalVerifications: 'totalVerifications',
  expiredVerifications: 'expiredVerifications',
  totalPointsSold: 'totalPointsSold',
  totalPointsSpent: 'totalPointsSpent',
  totalBoosts: 'totalBoosts',
  pointsRevenue: 'pointsRevenue',
  dailyLoginStreaks: 'dailyLoginStreaks',
  totalMessages: 'totalMessages',
  averageSessionTime: 'averageSessionTime',
  conversionRate: 'conversionRate',
  churnRate: 'churnRate',
  revenuePerUser: 'revenuePerUser',
  basicClients: 'basicClients',
  premiumClientsTier: 'premiumClientsTier',
  vipClients: 'vipClients',
  dailyActiveUsers: 'dailyActiveUsers',
  weeklyActiveUsers: 'weeklyActiveUsers',
  monthlyActiveUsers: 'monthlyActiveUsers',
  topCountries: 'topCountries',
  topCities: 'topCities',
  date: 'date',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  ESCORT: 'ESCORT',
  AGENCY: 'AGENCY',
  CLIENT: 'CLIENT',
  ADMIN: 'ADMIN'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED'
};

exports.AgencyRequestStatus = exports.$Enums.AgencyRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.ContentFilterLevel = exports.$Enums.ContentFilterLevel = {
  NONE: 'NONE',
  MODERATE: 'MODERATE',
  STRICT: 'STRICT'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  PAUSED: 'PAUSED',
  PENDING: 'PENDING',
  PAST_DUE: 'PAST_DUE'
};

exports.TagCategory = exports.$Enums.TagCategory = {
  GENERAL: 'GENERAL',
  SERVICE: 'SERVICE',
  LOCATION: 'LOCATION',
  PHYSICAL: 'PHYSICAL',
  PREFERENCE: 'PREFERENCE',
  SPECIAL: 'SPECIAL'
};

exports.AdminRole = exports.$Enums.AdminRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.PremiumTier = exports.$Enums.PremiumTier = {
  BASIC: 'BASIC',
  PREMIUM: 'PREMIUM',
  VIP: 'VIP'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED',
  DISPUTED: 'DISPUTED',
  PROCESSING: 'PROCESSING'
};

exports.PointTransactionType = exports.$Enums.PointTransactionType = {
  PURCHASE: 'PURCHASE',
  BONUS_POINTS: 'BONUS_POINTS',
  DAILY_LOGIN: 'DAILY_LOGIN',
  REGISTRATION_BONUS: 'REGISTRATION_BONUS',
  REFERRAL_REWARD: 'REFERRAL_REWARD',
  STREAK_BONUS: 'STREAK_BONUS',
  PREMIUM_DAY: 'PREMIUM_DAY',
  CHAT_PRIORITY: 'CHAT_PRIORITY',
  EXTRA_FAVORITE: 'EXTRA_FAVORITE',
  PROFILE_BOOST: 'PROFILE_BOOST',
  PHONE_ACCESS: 'PHONE_ACCESS',
  IMAGE_MESSAGE: 'IMAGE_MESSAGE',
  REFUND: 'REFUND',
  ADMIN_ADJUSTMENT: 'ADMIN_ADJUSTMENT',
  EXPIRED_PREMIUM: 'EXPIRED_PREMIUM'
};

exports.BanSeverity = exports.$Enums.BanSeverity = {
  WARNING: 'WARNING',
  TEMPORARY: 'TEMPORARY',
  PERMANENT: 'PERMANENT',
  SHADOW: 'SHADOW'
};

exports.AppealStatus = exports.$Enums.AppealStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  VIEW: 'VIEW',
  LIKE: 'LIKE',
  CHAT: 'CHAT',
  PROFILE_VISIT: 'PROFILE_VISIT',
  POST_CLICK: 'POST_CLICK',
  FAVORITE: 'FAVORITE',
  SHARE: 'SHARE',
  REPORT: 'REPORT',
  BOOST_VIEW: 'BOOST_VIEW',
  CONTACT_CLICK: 'CONTACT_CLICK',
  IMAGE_VIEW: 'IMAGE_VIEW',
  PHONE_VIEW: 'PHONE_VIEW',
  LOCATION_VIEW: 'LOCATION_VIEW',
  WHATSAPP_CLICK: 'WHATSAPP_CLICK',
  WHATSAPP_OPEN: 'WHATSAPP_OPEN',
  TIME_SPENT: 'TIME_SPENT',
  DISCOVERY_VIEW: 'DISCOVERY_VIEW',
  POST_DETAIL_VIEW: 'POST_DETAIL_VIEW',
  UNLIKE: 'UNLIKE',
  UNFAVORITE: 'UNFAVORITE'
};

exports.RateLimitType = exports.$Enums.RateLimitType = {
  DAILY_MESSAGES: 'DAILY_MESSAGES',
  HOURLY_MESSAGES: 'HOURLY_MESSAGES',
  PHONE_ACCESS: 'PHONE_ACCESS',
  IMAGE_MESSAGES: 'IMAGE_MESSAGES',
  VOICE_MESSAGES: 'VOICE_MESSAGES',
  FILE_UPLOADS: 'FILE_UPLOADS'
};

exports.MembershipStatus = exports.$Enums.MembershipStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.AgencyRole = exports.$Enums.AgencyRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  MEMBER: 'MEMBER'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.BoostType = exports.$Enums.BoostType = {
  BASIC: 'BASIC',
  PREMIUM: 'PREMIUM',
  FEATURED: 'FEATURED',
  SUPER: 'SUPER',
  MEGA: 'MEGA'
};

exports.DisputeStatus = exports.$Enums.DisputeStatus = {
  ACTIVE: 'ACTIVE',
  RESOLVED: 'RESOLVED',
  ESCALATED: 'ESCALATED',
  CLOSED: 'CLOSED'
};

exports.ChatRole = exports.$Enums.ChatRole = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  SYSTEM: 'SYSTEM',
  LOCATION: 'LOCATION',
  CONTACT: 'CONTACT'
};

exports.ReportReason = exports.$Enums.ReportReason = {
  SPAM: 'SPAM',
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  FAKE_PROFILE: 'FAKE_PROFILE',
  SCAM: 'SCAM',
  HARASSMENT: 'HARASSMENT',
  COPYRIGHT: 'COPYRIGHT',
  UNDERAGE: 'UNDERAGE',
  VIOLENCE: 'VIOLENCE',
  FRAUD: 'FRAUD',
  IMPERSONATION: 'IMPERSONATION',
  ADULT_CONTENT: 'ADULT_CONTENT',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  REVIEWED: 'REVIEWED',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED',
  ESCALATED: 'ESCALATED'
};

exports.ReportSeverity = exports.$Enums.ReportSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MESSAGE: 'MESSAGE',
  LIKE: 'LIKE',
  FAVORITE: 'FAVORITE',
  REVIEW: 'REVIEW',
  BOOST_EXPIRED: 'BOOST_EXPIRED',
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  AGENCY_INVITE: 'AGENCY_INVITE',
  VERIFICATION_COMPLETED: 'VERIFICATION_COMPLETED',
  VERIFICATION_EXPIRING: 'VERIFICATION_EXPIRING',
  MEMBERSHIP_REQUEST: 'MEMBERSHIP_REQUEST',
  SYSTEM: 'SYSTEM',
  TRENDING: 'TRENDING',
  PROMOTION: 'PROMOTION',
  SECURITY_ALERT: 'SECURITY_ALERT',
  SUBSCRIPTION_EXPIRING: 'SUBSCRIPTION_EXPIRING',
  NEW_FOLLOWER: 'NEW_FOLLOWER',
  POST_APPROVED: 'POST_APPROVED',
  POST_REJECTED: 'POST_REJECTED',
  PROFILE_INCOMPLETE: 'PROFILE_INCOMPLETE',
  AGENCY_APPROVED: 'AGENCY_APPROVED',
  AGENCY_REJECTED: 'AGENCY_REJECTED',
  POINTS_LOW: 'POINTS_LOW',
  DAILY_POINTS_AVAILABLE: 'DAILY_POINTS_AVAILABLE',
  PREMIUM_EXPIRED: 'PREMIUM_EXPIRED'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  BOOST: 'BOOST',
  PREMIUM: 'PREMIUM',
  POINTS: 'POINTS',
  VERIFICATION: 'VERIFICATION',
  SUBSCRIPTION: 'SUBSCRIPTION',
  TIP: 'TIP',
  COMMISSION: 'COMMISSION',
  POST_ADDITIONAL: 'POST_ADDITIONAL',
  STACK_BOOST: 'STACK_BOOST'
};

exports.Prisma.ModelName = {
  Location: 'Location',
  User: 'User',
  AgencyRegistrationRequest: 'AgencyRegistrationRequest',
  UserSettings: 'UserSettings',
  DeviceToken: 'DeviceToken',
  SearchHistory: 'SearchHistory',
  UserBlock: 'UserBlock',
  IdentityVerification: 'IdentityVerification',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  Tag: 'Tag',
  PostTag: 'PostTag',
  Admin: 'Admin',
  UserReputation: 'UserReputation',
  Escort: 'Escort',
  Agency: 'Agency',
  Client: 'Client',
  PointsPackage: 'PointsPackage',
  PointsPurchase: 'PointsPurchase',
  PointTransaction: 'PointTransaction',
  PointsHistory: 'PointsHistory',
  PremiumActivation: 'PremiumActivation',
  ClientReview: 'ClientReview',
  Ban: 'Ban',
  BanAppeal: 'BanAppeal',
  UserInteraction: 'UserInteraction',
  ChatRateLimit: 'ChatRateLimit',
  AgencyMembership: 'AgencyMembership',
  AgencyInvitation: 'AgencyInvitation',
  EscortVerification: 'EscortVerification',
  VerificationPricing: 'VerificationPricing',
  BoostPricing: 'BoostPricing',
  Post: 'Post',
  TrendingHistory: 'TrendingHistory',
  Chat: 'Chat',
  ChatMember: 'ChatMember',
  Message: 'Message',
  Favorite: 'Favorite',
  Like: 'Like',
  Review: 'Review',
  Report: 'Report',
  Notification: 'Notification',
  Payment: 'Payment',
  Boost: 'Boost',
  AppMetrics: 'AppMetrics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
